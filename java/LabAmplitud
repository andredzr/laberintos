import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import java.util.concurrent.ThreadLocalRandom;

import java.util.Queue;
import java.util.LinkedList;
/**
 * Alcancé esta versión mientras leía mi código cuando estuve explicando mi código a mis compañeros en la clase
 * y mientras lo revisé más adelante en la calma de mi sillón
 * 
 * @author andredzr 
 * @version 2.0; 26.09.17 20:34
 */
public class LabAmplitud extends JFrame implements ActionListener {
    private JButton nuevo, resuelve;
    private JPanel panel;
    private int f, c;
    int[][]lab={{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {-1,00,-1,-1,-1,-1,-1,00,00,00,00,00,00,00,00,00,00,00,00,00,-1,00,00,00,00,00,00,00,00,00,-1},
            {-1,00,00,00,00,00,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1},
            {-1,00,-1,00,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,00,-1,00,-1,-1},
            {-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,00,00,00,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,-1,-1,00,-1,-1,-1,-1,00,-1,-1},
            {-1,00,-1,-1,-1,00,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,-1,-1,00,00,00,00,00,00,00,00,-1},
            {-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,00,00,-1,00,00,00,-1,00,-1,00,-1,00,-1,00,-1,-1},
            {-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,00,00,-1,-1},
            {-1,00,00,00,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,-1},
            {-1,-1,-1,00,-1,-1,00,-1,00,00,-1,-1,00,-1,00,00,00,00,00,-1,00,-1,-1,00,00,-1,00,-1,-1,00,-1},
            {-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,00,-1,-1,00,00,00,00,-1},
            {-1,00,-1,00,-1,-1,00,00,00,00,-1,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,00,-1,-1,-1,-1,-1,00,-1},
            {-1,00,-1,00,00,00,00,-1,-1,00,-1,-1,00,-1,-1,00,00,-1,-1,-1,00,-1,-1,00,00,-1,-1,-1,-1,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,00,00,-1},
            {-1,00,-1,00,00,00,-1,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,00,00,00,-1,-1},
            {-1,00,00,00,-1,00,00,00,-1,00,-1,00,00,00,-1,00,-1,00,-1,00,00,00,00,00,00,-1,-1,-1,00,-1,-1},
            {-1,-1,00,-1,00,00,-1,00,-1,00,-1,00,-1,00,-1,00,00,00,-1,-1,00,-1,00,-1,00,-1,00,-1,00,-1,-1},
            {-1,-1,00,00,00,-1,-1,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1,-1,-1,00,-1,00,-1,00,-1,00,-1,00,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,00,00,00,00,-1,00,00,00,00,00,-1,00,00,00,00,00,00,00,00,-1,00,-1,-1},
            {-1,00,00,00,00,00,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1,-1,-1,00,-1,-1,-1,-1},
            {-1,00,-1,00,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,00,-1},
            {-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,-1,-1,00,00,00,00,-1,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,-1,-1},
            {-1,-1,-1,00,-1,00,00,00,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,00,00,-1,00,00,-1,-1,00,-1,-1,-1},
            {-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,-1,00,-1,-1,00,00,00,00,-1,-1,-1},
            {-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,00,00,00,00,-1,-1,-1,-1,00,00,-1,-1},
            {-1,00,00,00,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,0,00,-1,-1,-1,00,-1,-1},
            {-1,-1,-1,00,-1,-1,00,-1,00,00,-1,-1,00,-1,00,00,00,00,00,00,-1,-1,00,-1,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,00,00,00,00,-1,00,-1,00,-1,-1,-1,-1,-1,00,-1,00,-1,-1,00,-1,00,-1},
            {-1,00,-1,00,-1,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,-1,-1,-1,-1,00,-1,00,-1},
            {-1,00,-1,00,00,00,00,00,-1,00,-1,-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,00,00,00,00,-1,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,00,-1,-1,-1,00,-1},
            {-1,00,-1,00,00,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,-1,00,-1,00,00,00,00,-1,-1,00,00,-1},
            {-1,00,00,00,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1},
            {-1,-1,00,-1,00,00,-1,00,-1,00,-1,00,-1,00,-1,00,00,00,00,00,00,-1,00,00,00,-1,00,00,00,-1,-1},
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        };
    public static void main(String[] args) {
        LabAmplitud demo = new LabAmplitud();
        demo.setSize(400,450);
        demo.createGUI();
        demo.setVisible(true);
    }

    private void createGUI() {
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        Container window = getContentPane();
        window.setLayout(new FlowLayout());

        panel = new JPanel();
        panel.setPreferredSize(new Dimension(310, 370));
        panel.setBackground(Color.white);
        window.add(panel);

        nuevo = new JButton("Nuevo");
        window.add(nuevo);
        nuevo.addActionListener(this);

        resuelve = new JButton("Resuelve");
        window.add(resuelve);
        resuelve.addActionListener(this);
    }

    public void actionPerformed(ActionEvent e) {
        Graphics paper = panel.getGraphics();
        if(e.getSource() == nuevo){
            paper.setColor(Color.white);
            paper.fillRect(10, 10, lab[0].length*10-20, lab.length*10-20);
            for(int i=1;i<lab.length-1;i++){
                for(int j=1;j<lab[0].length-1;j++){
                    if(lab[i][j]!=00 && lab[i][j] !=-1){
                        lab[i][j]=00;
                    }
                }
            }
            for(int i =1;i<=2;i++){
                do{
                    f= ThreadLocalRandom.current().nextInt(0,lab.length);
                    c= ThreadLocalRandom.current().nextInt(0,lab[0].length);
                }while(lab[f][c]!=00);
                lab[f][c]=-2;
            }

            for(int i=0;i<lab[0].length;i++){
                for(int j=0;j<lab.length;j++){
                    if(lab[j][i]==-1){
                        paper.setColor(Color.black);
                        paper.fillRect(i*10,j*10,10,10);
                    }else if(lab[j][i]==-2){
                        paper.setColor(Color.red);
                        paper.fillRect(i*10,j*10,10,10);
                    }
                }
            }
        }else if(e.getSource() == resuelve){
            Queue<String> cola = new LinkedList<String>();
            String[] dato;
            lab[f][c]=-3;
            paper.setColor(Color.blue);
            while(true){
                if (lab[f-1][c]==0){
                    cola.offer((f-1)+","+c);
                    lab[f-1][c]=(lab[f][c])-1;
                }
                if(lab[f][c-1]==0){
                    cola.offer(f+","+(c-1));
                    lab[f][c-1]=(lab[f][c])-1;
                }
                if (lab[f+1][c]==0){
                    cola.offer((f+1)+","+c);
                    lab[f+1][c]=(lab[f][c])-1;
                }
                if (lab[f][c+1]==0){
                    cola.offer(f+","+(c+1));
                    lab[f][c+1]=(lab[f][c])-1;
                }
                if (lab[f-1][c]==-2){
                    lab[f-1][c]=(lab[f][c])-1;
                    break;
                }
                else if ( lab[f][c-1]==-2){
                    lab[f][c-1]=(lab[f][c])-1;
                    break;
                }
                else if (lab[f+1][c]==-2){
                    lab[f+1][c]=(lab[f][c])-1;
                    break;
                }
                else if (lab[f][c+1]==-2){
                    lab[f][c+1]=(lab[f][c])-1;
                    break;
                }
                else {
                    dato = cola.poll().split(",");
                    f   = Integer.parseInt(dato[0]);
                    c   = Integer.parseInt(dato[1]);
                }
                paper.fillRect(c*10,f*10,10,10);
                try {
                    Thread.sleep(8);                
                } catch(InterruptedException pu) {
                    Thread.currentThread().interrupt();
                }
                
            }
            paper.setColor(Color.pink);
            while(lab[f][c]!=-3){
            	try {
                    Thread.sleep(8);                
                } catch(InterruptedException pu) {
                    Thread.currentThread().interrupt();
                }
                paper.fillRect(c*10,f*10,10,10);
                if (lab[f-1][c]==lab[f][c]+1){
                    f=f-1;
                }
                else if (lab[f][c-1]==lab[f][c]+1 ){
                    c=c-1;
                }
                else if (lab[f+1][c]==lab[f][c]+1){
                    f=f+1;
                }
                else if (lab[f][c+1]==lab[f][c]+1){
                    c=c+1;
                }
            }
        }
    }
}
